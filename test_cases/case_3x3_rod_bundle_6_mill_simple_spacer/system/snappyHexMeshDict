/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;//true;
addLayers       false;//true;// false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    rodspacer.stl
    {
        type closedTriSurfaceMesh;
        name rods;
    }
  /*  
    cylinder.stl
    {
        type closedTriSurfaceMesh;
        name wall;
    }
    
    inlet.stl
    {
        type closedTriSurfaceMesh;
        name inlet;
    }
    
    outlet.stl
    {
        type closedTriSurfaceMesh;
        name outlet;
    }
   
    */
   /* 
    round
   {
    type            searchableCylinder;
    point1          (0 0 0);
    point2          (0 0.1 0);
    radius          0.008;
   }
   
    box_blockmesh1
    {
    	type searchableBox;
    	min (-0.03175 0 0.0265);
    	max (0.03175 0.1 0.03175); 
    }
    
    box_blockmesh2
    {
    	type searchableBox;
    	min (-0.03175 0 -0.03175);
    	max (0.03175 0.1 -0.0265);  
    }
   
    box_blockmesh3
    {
    	type searchableBox;
    	min (0.0265 0 -0.03175);
    	max (0.03175 0.1 0.03175);  
    } 
    
    box_blockmesh4
    {
    	type searchableBox;
    	min (-0.03175 0 -0.03175);
    	max (-0.0265 0.1 0.03175);  
    }
   */
};

// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    maxLocalCells 100000;
    maxGlobalCells 2000000;
    minRefinementCells 10;
    maxLoadUnbalance 0.10;
    nCellsBetweenLevels 3; // 2
    
    refinementSurfaces
    {
        rods 
        {
           level (1 1);
          //level (2 2);
     //      level (3 3);
//	      level (5 5);            
//	      level (3 4);
     //level (4 4);
//	      level (5 6);
            patchInfo { type wall; }
        }
        wall 
        {
       		 level (1 1);
            patchInfo { type wall; }
        }
    }
    
    	refinementRegions
    	{
    	/*round
	{
	   mode inside;		//2 million 
	   levels ((1 1));
	} 
	box_blockmesh1
	{
	   mode inside;		//2 million 
	   levels ((1 1));
	   //((3 3)); //11 million    //((1 1)) // OK	((5 5)) //Not worked (entire model is visible);
	} 
	
	box_blockmesh2
	{
	   mode inside;		//2 million 
	   levels ((1 1));
	} 
    	
    	box_blockmesh3
	{
	   mode inside;		//2 million 
	   levels ((1 1));
	} 
	
	box_blockmesh4
	{
	   mode inside;		//2 million 
	   levels ((1 1));
	}*/
    }
    
    
    locationInMesh (6 500 6);
   // locationInMesh (1e-5 1e-5 1e-5);
    //locationInMesh (18.9 500 18.9);
    //locationInMesh (0 319.6 -6.426);	//(18.5 500 18.5);    
    allowFreeStandingZoneFaces false;
    //locationsOutsideMesh ((50 1090 55));
    //useLeakClosure true;
    
    features
    (
        {
            file "rodspacer.eMesh";
            level 2;
            //level 6;
        } 
        /*
        {
            file "cylinder.eMesh";
            level 1;
            //level 6;
        } 
        
        {
            file "inlet.eMesh";
            level 1;
            //level 6;
        } 
        
        {
            file "outlet.eMesh";
            level 1;
            //level 6;
        } */
    );


    resolveFeatureAngle 60;
    
}


// Settings for the snapping.
snapControls
{
   
    nSmoothPatch 3;
    
    tolerance 2.0;	//1.0;

    nSolveIter 30;	//10;

    nRelaxIter 5; // 3

        nFeatureSnapIter 5;//10; // 5

        implicitFeatureSnap false;//false;

        explicitFeatureSnap true; //false;

        multiRegionFeatureSnap true;//false;      
}



// Settings for the layer addition.
addLayersControls
{
    
    relativeSizes false;	//true;

    layers
    {
	    cylinder
	    { 
	      nSurfaceLayers 10;
	    }
	    
	    right
	    { 
	      nSurfaceLayers 10;
	    }
	    
	    left
	    { 
	      nSurfaceLayers 10;
	    }
	    
	    front
	    { 
	      nSurfaceLayers 10;
	    }
	    
	    back
	    { 
	      nSurfaceLayers 10;
	    }    
    }

    expansionRatio 1.2;// 1.0;

    finalLayerThickness 0.05;

    minThickness 0.1;//1e-3;	//0.1;

    nGrow 0;

    featureAngle 130;//60;

    slipFeatureAngle 30;

    nRelaxIter 3;

    nSmoothSurfaceNormals 1;

    nSmoothNormals 3;

    nSmoothThickness 10;

    maxFaceThicknessRatio 0.5;

    maxThicknessToMedialRatio 0.3;

    minMedialAxisAngle 90;

    nBufferCellsNoExtrude 0;

    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #includeEtc "caseDicts/meshQualityDict"

    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Format to use for lines (e.g. leak path)
setFormat ensight;

//debugFlags
//(
//    mesh
//);

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
